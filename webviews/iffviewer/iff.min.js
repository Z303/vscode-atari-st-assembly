window.requestAnimFrame=(function(callback){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(callback){window.setTimeout(callback,1000/60)}})();function debugIff(iff,message){var scope=iff.scope;if(scope==undefined){scope='<root>'}
var address;if(iff.chunk==undefined){address=scope}else{address=scope+'.'+iff.chunk}
if(iff.debug_element==undefined){console.log(address+": "+message)}else{var entry=document.createElement('div');entry.className='debugEntry';iff.debug_element.appendChild(entry);var loc=document.createElement('div');loc.innerHTML=address;loc.className='debugLoc';var msg=document.createElement('div');msg.innerHTML=message;msg.className='debugMsg';entry.appendChild(loc);entry.appendChild(msg)}}
function parseIffForm(iff,start,length){var headerView=new jDataView(iff.arrayBuffer,start,4);var formCode=headerView.getString(4,0);debugIff(iff,formCode);iff.scope=formCode
parseIffChunk(iff,start+4,length-4)}
function setUpCanvas(iff){var ratio=1;if(iff.y_aspect!=0){ratio=iff.x_aspect/iff.y_aspect}
iff.effective_width=iff.width*Math.max(ratio,1);iff.effective_height=iff.height/Math.min(ratio,1);iff_canvas.height=iff.effective_height
iff_canvas.width=iff.effective_width}
function parseIffBMHD(iff,start,length){var dataView=new jDataView(iff.arrayBuffer,start,20);iff.width=dataView.getUint16(0);iff.height=dataView.getUint16(2);iff.left=dataView.getUint16(4);iff.top=dataView.getUint16(6);iff.bitplanes=dataView.getUint8(8);iff.masking=dataView.getUint8(9);iff.compress=dataView.getUint8(10);iff.padding=dataView.getUint8(11);iff.transparent_index=dataView.getUint16(12);iff.x_aspect=dataView.getUint8(14);iff.y_aspect=dataView.getUint8(15);iff.page_width=dataView.getUint16(16);iff.page_height=dataView.getUint16(18);debugIff(iff,'Height: '+iff.height+' width '+iff.width);debugIff(iff,'Bitplanes '+iff.bitplanes+' compressed '+Boolean(iff.compress)+' masking '+iff.masking);debugIff(iff,'Page height: '+iff.page_height+' width '+iff.page_width);debugIff(iff,'Ratio x '+iff.x_aspect+' y '+iff.y_aspect);debugIff(iff,'Transparent color: '+iff.transparent_index);setUpCanvas(iff)}
function padTo8bits(value,bits){var result=0;for(var s=8-bits;s>=0;s-=bits){result|=value<<s}
return result}
function isCMAPScaled(iff){var scale_mask=(1<<iff.cmap_bits)-1;for(var i=0;i<iff.cmap.length;i++){for(var c=0;c<3;c++){var value=iff.cmap[i][c];if(value&scale_mask){return!0}}}
return!1}
function scaleCMAP(iff){for(var i=0;i<iff.cmap.length;i++){for(var c=0;c<3;c++){var value=(iff.cmap[i][c]>>(8-iff.cmap_bits));iff.cmap[i][c]=padTo8bits(value,iff.cmap_bits)}}}
function parseIffCMAP(iff,start,length){var dataView=new jDataView(iff.arrayBuffer,start,length);iff.cmap=new Array(length/3);for(var i=0;i<iff.cmap.length;i++){iff.cmap[i]=new Array(4);for(var c=0;c<3;c++){var value=dataView.getUint8(i*3+c);iff.cmap[i][c]=value}
iff.cmap[i][3]=255}
iff.cmap_bits=0;while(iff.cmap.length>(1<<iff.cmap_bits)){iff.cmap_bits++}
var scaled=isCMAPScaled(iff);debugIff(iff,'Color map is '+iff.cmap.length+' colours ('+iff.cmap_bits+' bits)');if(!scaled){debugIff(iff,'Scaling the color map from '+iff.cmap_bits+' to 8 bits');scaleCMAP(iff)}
iff.cmap_overlay=new Array(iff.cmap.length)}
function parseDPI(iff,start,length){var dataView=new jDataView(iff.arrayBuffer,start,length);iff.dpi_x=dataView.getUint16(0);iff.dpi_y=dataView.getUint16(2);debugIff(iff,'Resolution: '+iff.dpi_x+'×'+iff.dpi_y)}
function parseIffCAMG(iff,start,length){var dataView=new jDataView(iff.arrayBuffer,start,length);iff.mode=new Object()
iff.mode.value=dataView.getUint32(0);iff.mode.ham=(iff.mode.value&0x800);iff.mode.ehb=(iff.mode.value&0x80);iff.mode.hires=(iff.mode.value&0x8000);iff.mode.lace=(iff.mode.value&0x4);debugIff(iff,'HAM: '+Boolean(iff.mode.ham));debugIff(iff,'EHB: '+Boolean(iff.mode.ehb));debugIff(iff,'HIRES: '+Boolean(iff.mode.hires));debugIff(iff,'LACE: '+Boolean(iff.mode.lace));if(iff.mode.ehb&&iff.cmap_bits==iff.bitplanes){iff.cmap_bits--;debugIff(iff,'Culling color map to '+iff.cmap_bits+' bits for EHB');iff.cmap.length=iff.cmap.length>>1;iff.cmap_overlay.length=iff.cmap.length}
if(iff.mode.ham&&iff.cmap_bits>iff.bitplanes-2){var delta=(iff.cmap_bits-iff.bitplanes+2);iff.cmap_bits-=delta;debugIff(iff,'Culling color map to '+iff.cmap_bits+' bits for HAM');iff.cmap.length=iff.cmap.length>>delta;iff.cmap_overlay.length=iff.cmap.length}}
function parseIffTextAnnotation(iff,start,length){var dataView=new jDataView(iff.arrayBuffer,start,length);var annotation=dataView.getString(length,0);debugIff(iff,annotation);iff.canvas.title=annotation}
function parseIffCRNG(iff,start,length){var dataView=new jDataView(iff.arrayBuffer,start,length);var animation=new Object();animation.rate=dataView.getUint16(2);var flags=dataView.getUint16(4);animation.active=flags&1;animation.reverse=flags&2;animation.timestamp=0;if(animation.rate){animation.delay_sec=16384/(animation.rate*60)}else{animation.delay_sec=1}
debugIff(iff,'Animation active: '+Boolean(animation.active));animation.lower=dataView.getUint8(6);animation.upper=dataView.getUint8(7);if(animation.active){debugIff(iff,'Animation n°'+iff.color_animations.length);debugIff(iff,'Rate: '+animation.rate+' ('+animation.delay_sec.toFixed(2)+')');debugIff(iff,'Range: x'+animation.lower.toString(16)+' -> x'+animation.upper.toString(16));debugIff(iff,'Reverse: '+Boolean(animation.reverse));iff.color_animations.push(animation);for(var i=animation.lower;i<animation.upper;i++){iff.cmap_overlay[i]=i}}}
function UpdateColorOverLay(iff){var now=new Date().getTime();var did_update=!1;for(var i=0;i<iff.color_animations.length;i++){var animation=iff.color_animations[i];var delay=animation.delay_sec*1000;if(now-animation.timestamp<delay){continue}
animation.timestamp=now;did_update=!0;var increment=-1;if(animation.reverse==2){increment=1}
var diff=animation.upper-animation.lower;for(var j=animation.lower;j<animation.upper;j++){var value=iff.cmap_overlay[j]+increment;if(value>=animation.upper){value-=diff}
if(value<animation.lower){value+=diff}
iff.cmap_overlay[j]=value}}
return did_update}
function ColorChange(data,register_offset){this.register=((data&0xf000)>>12)+register_offset;var red=(data&0xf00)>>8;var green=(data&0xf0)>>4;var blue=(data&0xf);this.color=[padTo8bits(red,4),padTo8bits(green,4),padTo8bits(blue,4),255]}
function parsePCHG(iff,start,length){var dataView=new jDataView(iff.arrayBuffer,start,length);var compression=dataView.getUint16(0);debugIff(iff,'Compression: '+compression);var start_line=dataView.getInt16(4);var line_count=dataView.getUint16(6);debugIff(iff,'Lines: '+start_line+' ('+line_count+')');var tree_size=dataView.getUint16(12);var full_size=dataView.getUint32(16);debugIff(iff,'Size: '+tree_size+'/'+full_size);var word_count=(line_count+31)>>5;iff.color_change_lists.length=iff.height;var change_count=0;var data_offset=20;for(var i=0;i<word_count;i++){var line_bitmap=dataView.getUint32(data_offset);data_offset+=4;for(var j=0;j<32;j++){var mask=1<<(31-j);if(mask&line_bitmap){var line_number=start_line+(i*32)+j;iff.color_change_lists[line_number]=new Array();change_count++}}}
debugIff(iff,'Changes: '+change_count);var change_filled_count=0;for(i=0;i<iff.color_change_lists.length;i++){if(data_offset>=length){break}
var change_list=iff.color_change_lists[i];if(change_list!=undefined){var change_count_16=dataView.getUint8(data_offset);var change_count_32=dataView.getUint8(data_offset+1);var total_changes=change_count_16+change_count_32;data_offset+=2;change_list.length=total_changes;for(j=0;j<change_count_16;j++){var data=dataView.getUint16(data_offset);data_offset+=2;change_list[j]=new ColorChange(data,0)}
for(j=0;j<change_count_32;j++){data=dataView.getUint16(data_offset);data_offset+=2;change_list[j+change_count_16]=new ColorChange(data,16)}
change_filled_count++}}
debugIff(iff,'Filled-in changes: '+change_filled_count)}
function dePack(dataView,length,buffer){var input_offset=0;var output_offset=0;while(input_offset<length-1){var control=dataView.getInt8(input_offset);input_offset++;if(control>0){for(var r=0;r<control+1;r++){if(input_offset>=length){return output_offset}
buffer[output_offset]=dataView.getUint8(input_offset);output_offset++;input_offset++}}else{var range=-control+1;var value=dataView.getUint8(input_offset);input_offset++;for(r=0;r<range;r++){buffer[output_offset]=value;output_offset++}}}
return output_offset}
function bitPlaneToPixBuffer(iff,bit_buffer){iff.buffer_size=iff.height*iff.width;iff.buffer=new Array(iff.buffer_size);var planes=iff.bitplanes;if(iff.masking==1){planes+=1}
for(var y=0;y<iff.height;y++){for(var p=0;p<planes;p++){var plane_mask=1<<p;for(var i=0;i<iff.row_bytes;i++){var bit_offset=(y*planes*iff.row_bytes)+(p*iff.row_bytes)+i;var bit_value=bit_buffer[bit_offset];for(var b=0;b<8;b++){var pixel_mask=1<<(7-b);if(bit_value&pixel_mask){var x=(i*8)+b;iff.buffer[(y*iff.width)+x]|=plane_mask}}}}}}
function parseIffBody(iff,start,length){iff.row_bytes=((iff.width+15)>>4)<<1;var dataView=new jDataView(iff.arrayBuffer,start,length);var bit_buffer=new Array(iff.height*iff.row_bytes*iff.bitplanes);if(iff.compress){var bit_buffer_size=dePack(dataView,length,bit_buffer);var compression=1-(length/bit_buffer_size);debugIff(iff,'Compression '+(compression*100).toFixed(2)+'%')
debugIff(iff,'Depacked size: '+bit_buffer_size)}else{for(var i=0;i<length;i++){bit_buffer[i]=dataView.getUint8(i)}}
bitPlaneToPixBuffer(iff,bit_buffer)}
function parseIffChunk(iff,start,length){var offset=0;do{var headerView=new jDataView(iff.arrayBuffer,start+offset,8);var chunkCode=headerView.getString(4,0);var chunkLength=headerView.getUint32(4);debugIff(iff,chunkCode+' offset '+offset+' length '+chunkLength);iff.chunk=chunkCode;var chunkStart=start+offset+8;if(chunkCode=='FORM'){parseIffForm(iff,chunkStart,chunkLength)}else if(chunkCode=='BMHD'){parseIffBMHD(iff,chunkStart,chunkLength)}else if(chunkCode=='CMAP'){parseIffCMAP(iff,chunkStart,chunkLength)}else if(chunkCode=='BODY'){parseIffBody(iff,chunkStart,chunkLength)}else if(chunkCode=='CAMG'){parseIffCAMG(iff,chunkStart,chunkLength)}else if(chunkCode=='ANNO'||chunkCode=='AUTH'){parseIffTextAnnotation(iff,chunkStart,chunkLength)}else if(chunkCode=='CRNG'){parseIffCRNG(iff,chunkStart,chunkLength)}else if(chunkCode=='DPI '){parseDPI(iff,chunkStart,chunkLength)}else if(chunkCode=='PCHG'){parsePCHG(iff,chunkStart,chunkLength)}
offset+=8+chunkLength;if((offset&1)==1){offset+=1}
iff.chunk=undefined}while(offset<(length-8)&&(start+offset+8)<iff.arrayBuffer.byteLength);}
function resolveHAMPixel(iff,value,previous_color){var selector=(value>>iff.cmap_bits)&3;var data=padTo8bits((value%iff.cmap.length),iff.cmap_bits);var color_copy=[previous_color[0],previous_color[1],previous_color[2],255];if(selector==1){color_copy[2]=data}else if(selector==2){color_copy[0]=data}else{color_copy[1]=data}
return color_copy}
function resolveEHBPixel(iff,value){var base_color=iff.cmap[(value%iff.cmap.length)];return[base_color[0]>>1,base_color[1]>>1,base_color[2]>>1,255]}
function resolveRGB24Pixel(value){var red=(value&0xff0000)>>16;var green=(value&0xff00)>>8;var blue=value&0xff;return[red,green,blue,255]}
function resolvePixels(iff,value,previous_color){if(value==undefined){value=iff.transparent_index}
if(iff.masking==2&&value==iff.transparent_index){}
if(iff.cmap==undefined){if(iff.bitplanes==24){return resolveRGB24Pixel(value)}}
if(value<iff.cmap.length){return iff.cmap[value]}
if(iff.mode.ham){return resolveHAMPixel(iff,value,previous_color)}
if(iff.mode.ehb){return resolveEHBPixel(iff,value)}
return iff.transparent_color}
function resolveOverlayPixels(iff,value){var index;if(value>=iff.cmap_overlay.length){if(!iff.mode.ehb){return undefined}
var entry=iff.cmap_overlay[value%iff.cmap.length];if(entry==undefined){return undefined}
index=entry+iff.cmap_overlay.length}else{index=iff.cmap_overlay[value]}
if(index==undefined){return undefined}
return resolvePixels(iff,index,iff.black_color)}
function lineStart(iff,line){var change_list=iff.color_change_lists[line];if(change_list==undefined){return}
for(var i=0;i<change_list.length;i++){var change=change_list[i];iff.cmap[change.register]=change.color}}
function drawIffImage(iff){setUpCanvas(iff);iff.render_canvas=document.createElement("canvas");iff.render_canvas.height=iff.height;iff.render_canvas.width=iff.width;var render_ctx=iff.render_canvas.getContext("2d");var target=render_ctx.createImageData(iff.width,iff.height);var color;for(var y=0;y<iff.height;y++){lineStart(iff,y);color=iff.black_color;for(var x=0;x<iff.width;x++){var in_offset=y*iff.width+x;var out_offset=y*iff.width+x;var value=iff.buffer[in_offset];color=resolvePixels(iff,value,color);for(var c=0;c<4;c++){target.data[out_offset*4+c]=color[c]}}}
render_ctx.putImageData(target,0,0);iff.display_ctx=iff.canvas.getContext("2d");iff.display_ctx.drawImage(iff.render_canvas,0,0,iff.width,iff.height,0,0,iff.effective_width,iff.effective_height)}
function animateIffImage(iff){var did_update=UpdateColorOverLay(iff);if(did_update){var render_ctx=iff.render_canvas.getContext("2d");var target=render_ctx.getImageData(0,0,iff.width,iff.height);var dirty_x1=iff.width;var dirty_y1=iff.height;var dirty_x2=0;var dirty_y2=0;for(var y=0;y<iff.height;y++){for(var x=0;x<iff.width;x++){var in_offset=y*iff.width+x;var out_offset=y*iff.width+x;var value=iff.buffer[in_offset];var color=resolveOverlayPixels(iff,value);if(color!=undefined){for(var c=0;c<3;c++){var new_color=color[c];target.data[out_offset*4+c]=new_color}
dirty_x1=Math.min(dirty_x1,x);dirty_y1=Math.min(dirty_y2,y);dirty_x2=Math.max(dirty_x2,0);dirty_y2=Math.max(dirty_y2,0)}}}
var dirty_width=iff.width-dirty_x2;var dirty_height=iff.height-dirty_y2;render_ctx.putImageData(target,0,0,dirty_x1,dirty_y1,dirty_width,dirty_height);iff.display_ctx.drawImage(iff.render_canvas,0,0,iff.width,iff.height,0,0,iff.effective_width,iff.effective_height)}
window.requestAnimFrame(function(){animateIffImage(iff)})}
function IffContainer(canvas_id){this.canvas=document.getElementById(canvas_id);this.scope='';this.mode=new Object();this.color_animations=new Array();this.color_change_lists=new Array();this.transparent_color=[0,0,0,0];this.black_color=[0,0,0,255];this.debug_element=document.getElementById(canvas_id+"_debug")}
function reportError(xhr,path,target_canvas){target_canvas.style.cursor='default';var text='Error loading from '+path+' : '+xhr.statusText;target_canvas.title=text;var context=target_canvas.getContext("2d");context.fillText(text,5,20)}
function loadIffImage(path,canvas_id,animate){var iff=new IffContainer(canvas_id);iff.canvas.style.cursor='wait';var xhr=new XMLHttpRequest();xhr.open('GET',path,!0);xhr.responseType='arraybuffer';xhr.onload=function(event){iff.arrayBuffer=xhr.response;if(iff.arrayBuffer&&xhr.status<400){parseIffChunk(iff,0,iff.arrayBuffer.byteLength);window.setTimeout(function(){drawIffImage(iff);iff.canvas.style.cursor='default'
if(iff.color_animations.length>0&&animate){animateIffImage(iff)}},100)}else{reportError(xhr,path,iff.canvas)}}
xhr.send()}